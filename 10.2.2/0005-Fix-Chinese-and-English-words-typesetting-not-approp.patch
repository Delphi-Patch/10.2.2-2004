From b12691d727f0964cf8637cb443db6c6e081749a2 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Fri, 29 Dec 2017 11:19:54 +0800
Subject: [PATCH 5/9] Fix Chinese and English words typesetting not appropriate

---
 FMX.Edit.Style.pas     |  2 ++
 FMX.Memo.Style.pas     |  2 ++
 FMX.TextLayout.GPU.pas | 59 +++++++++++++++++++++++++++++++++++++++++++++++---
 3 files changed, 60 insertions(+), 3 deletions(-)

diff --git a/FMX.Edit.Style.pas b/FMX.Edit.Style.pas
index f49cf02..28ef184 100644
--- a/FMX.Edit.Style.pas
+++ b/FMX.Edit.Style.pas
@@ -2078,6 +2078,7 @@ begin
   Model.SetTextWithoutValidation(CombinedText);
   if FPrompt <> nil then
     FPrompt.Visible := CombinedText.IsEmpty;
+{+++>}{$IF Defined(IOS) or Defined(ANDROID)} // 加入此行, 修正中文输入后会取消原选取文字的 BUG by Aone (2017.11.17)
   if Model.SelLength > 0 then
   begin
     Model.DisableNotify;
@@ -2088,6 +2089,7 @@ begin
     end;
     UpdateSelectionPointPositions;
   end;
+{+++>}{$ENDIF} // 加入此行, 修正中文输入后会取消原选取文字的 BUG by Aone (2017.11.17)
   LinkObserversValueModified(Self.Observers);
   DoChangeTracking;
   DoTyping;
diff --git a/FMX.Memo.Style.pas b/FMX.Memo.Style.pas
index 9ef3147..308986b 100644
--- a/FMX.Memo.Style.pas
+++ b/FMX.Memo.Style.pas
@@ -2366,10 +2366,12 @@ begin
     end;
     SelectionChanged := FSelected or (FSelStart <> LCaret) or (FSelEnd <> LCaret);
     CaretPosition := LCaret;
+{+++>}{$IF Defined(IOS) or Defined(ANDROID)} // 加入此行, 修正中文输入后会取消原选取文字的 BUG by Aone (2017.11.17)								   
     FSelStart := LCaret;
     FSelected := False;
     FSelEnd := FSelStart;
     UpdateSelectionInModel;
+{+++>}{$ENDIF} // 加入此行, 修正中文输入后会取消原选取文字的 BUG by Aone (2017.11.17)
 
     if SelectionChanged then
       UpdateSelectionPointPositions;
diff --git a/FMX.TextLayout.GPU.pas b/FMX.TextLayout.GPU.pas
index 0a2c7a9..61dbfaf 100644
--- a/FMX.TextLayout.GPU.pas
+++ b/FMX.TextLayout.GPU.pas
@@ -1,4 +1,4 @@
-{*******************************************************}
+﻿{*******************************************************}
 {                                                       }
 {             Delphi FireMonkey Platform                }
 { Copyright(c) 2012-2017 Embarcadero Technologies, Inc. }
@@ -873,8 +873,14 @@ procedure TTextLayoutNG.DoRenderLayout;
     //Checking for lines lower than bottom border
     if VerticalAlign <> TTextAlign.Trailing then
       while FFrame.Count > 0 do
+{--->
         if (FFrame[FFrame.Count - 1].TopLeft.Y + FFrame[FFrame.Count - 1].Height) > MaxSize.Y then
           if FFrame[FFrame.Count - 1].TopLeft.Y > MaxSize.Y then
+<---}
+{+++>}
+        if (((FFrame[FFrame.Count - 1].TopLeft.Y + FFrame[FFrame.Count - 1].Height) > MaxSize.Y) and (VerticalAlign <> TTextAlign.Center)) or // 2017/01/11 修正显示省略字符 by Aone
+           (FFrame[FFrame.Count - 1].TopLeft.Y > MaxSize.Y) then
+{<+++}
           begin
             FFrame.Height := FFrame.Height - FFrame[FFrame.Count - 1].Height;
             FFrame.Delete(FFrame.Count - 1);
@@ -903,8 +909,10 @@ procedure TTextLayoutNG.DoRenderLayout;
             end;
             Break;
           end
+;{+++>---> // 2017/01/11 修正显示省略字符 by Aone
         else
           Break;
+<---}
     //
     for I := 0 to FFrame.Count - 1 do
       if FFrame[I].Width > MaxSize.X then
@@ -999,6 +1007,7 @@ var
   LRun, NewRun: TGPURun;
   I, LineIndex, RunIndex, CharIndex, RunLength: Integer;
   WidthLimit, LineWidth, LineWidthLimit: Single;
+{+++>}h: Single; // 2017/01/11 修正显示省略字符 by Aone
   CurrentPos, RemainLength, RunEndIndex, WordBeginIndex, CharLength: Integer;
 begin
   FOldColor := Self.Color;
@@ -1022,6 +1031,7 @@ begin
   //Calculation metrics
   WidthLimit := MaxSize.X - Padding.Left - Padding.Right;
   LineIndex := 0;
+{+++>}h := Padding.Top; // 2017/01/11 修正显示省略字符 by Aone
   while LineIndex < FFrame.Count do
   begin
     LLine := FFrame[LineIndex];
@@ -1058,11 +1068,40 @@ begin
               if Text.Chars[CharIndex].GetUnicodeCategory <> TUnicodeCategory.ucSpaceSeparator then
               begin
                 WordBeginIndex := CharIndex;
-                while (WordBeginIndex > LRun.StartIndex) and (Text.Chars[WordBeginIndex - 1].GetUnicodeCategory <> TUnicodeCategory.ucSpaceSeparator) do
+{--->           while (WordBeginIndex > LRun.StartIndex) and (Text.Chars[WordBeginIndex - 1].GetUnicodeCategory <> TUnicodeCategory.ucSpaceSeparator) do
+{+++>           while (WordBeginIndex > LRun.StartIndex) do // 单字符折行（只适用 Android & iOS 平台）
+{+++>}          while (WordBeginIndex > LRun.StartIndex) and not (Text.Chars[WordBeginIndex - 1].GetUnicodeCategory in
+                      [TUnicodeCategory.ucSpaceSeparator
+                      ,TUnicodeCategory.ucOtherLetter        // 2016.12.22 修正中英文混排折行 by Aone
+                      // 2017.01.13 修正避开首字标点 by Aone
+                      ,TUnicodeCategory.ucConnectPunctuation // 字元為可連接兩個字元的連接子標點符號。
+                      ,TUnicodeCategory.ucDashPunctuation    // 字元為破折號或連字號。
+                      ,TUnicodeCategory.ucOtherPunctuation   // 字元為不是連接子標點符號、破折號標點符號、開始標點符號、結束標點符號、啟始引號標點符號或終結引號標點符號的標點符號。
+                    //,TUnicodeCategory.ucOpenPunctuation    // 字元為成對標點符號標記的其中一個開頭字元，例如括弧、方括弧和大括號。
+                      ,TUnicodeCategory.ucClosePunctuation   // 字元為成對標點符號標記的其中一個結束字元，例如括弧、方括弧和大括號。
+                    //,TUnicodeCategory.ucInitialPunctuation // 字元為開頭或啟始引號。
+                      ,TUnicodeCategory.ucFinalPunctuation   // 字元為結束或終結引號。
+                      ]) do
                   Dec(WordBeginIndex);
                 if Text.Chars[WordBeginIndex].IsLowSurrogate then
                   Dec(WordBeginIndex);
                 RunEndIndex := WordBeginIndex;
+{+++>}          // 2017.01.13 修正避开首字标点 by Aone
+                while (RunEndIndex > LRun.StartIndex) and (Text.Chars[RunEndIndex].GetUnicodeCategory in
+                      [TUnicodeCategory.ucSpaceSeparator     // 修正: （ ）括號中間有空格時, 右括號會在首字的問題.
+                      ,TUnicodeCategory.ucConnectPunctuation // 字元為可連接兩個字元的連接子標點符號。
+                      ,TUnicodeCategory.ucDashPunctuation    // 字元為破折號或連字號。
+                      ,TUnicodeCategory.ucOtherPunctuation   // 字元為不是連接子標點符號、破折號標點符號、開始標點符號、結束標點符號、啟始引號標點符號或終結引號標點符號的標點符號。
+                    //,TUnicodeCategory.ucOpenPunctuation    // 字元為成對標點符號標記的其中一個開頭字元，例如括弧、方括弧和大括號。
+                      ,TUnicodeCategory.ucClosePunctuation   // 字元為成對標點符號標記的其中一個結束字元，例如括弧、方括弧和大括號。
+                    //,TUnicodeCategory.ucInitialPunctuation // 字元為開頭或啟始引號。
+                      ,TUnicodeCategory.ucFinalPunctuation   // 字元為結束或終結引號。
+                      ]) do
+                begin
+                     Dec(WordBeginIndex);
+                     Dec(RunEndIndex);
+                end;
+{<+++}
                 while (RunEndIndex > LRun.StartIndex) and (Text.Chars[RunEndIndex - 1].GetUnicodeCategory = TUnicodeCategory.ucSpaceSeparator) do
                   Dec(RunEndIndex);
                 if Text.Chars[RunEndIndex].IsLowSurrogate then
@@ -1097,10 +1136,18 @@ begin
 
                 CurrentPos := WordBeginIndex;
               end;
+{+++>}        h := h + LLine.Height; // 2017/01/11 修正显示省略字符 by Aone
             end
             else
             begin
               CurrentPos := CharIndex;
+{+++>}
+            end;
+            // 2017/01/11 修正显示省略字符 by Aone
+            if (not WordWrap) or
+               ((VerticalAlign = TTextAlign.Leading) and (h > MaxSize.Y - LLine.Height)) then 
+            begin
+{<+++}
               //Getting back to last visible
               if Trimming <> TTextTrimming.None then
               begin
@@ -1115,12 +1162,18 @@ begin
                 end;
               end;
               //Checking for trimming
+              RunLength := LRun.Length;
               case Trimming of
                 TTextTrimming.None:
                   RunLength := CurrentPos - LRun.StartIndex;
                 TTextTrimming.Character:
                   if CurrentPos > 0 then
-                    if Text.Chars[CurrentPos - 1].IsLetterOrDigit then
+{--->               if Text.Chars[CurrentPos - 1].IsLetterOrDigit then
+{+++>}              // 2017.01.13 修正避开首字标点 by Aone
+                    if Text.Chars[CurrentPos - 1].IsLetterOrDigit or
+                       Text.Chars[CurrentPos - 1].IsPunctuation or
+                      (Text.Chars[CurrentPos - 1].GetUnicodeCategory = TUnicodeCategory.ucOtherLetter) then
+{<+++}
                     begin
                       RunLength := CurrentPos - LRun.StartIndex - 1;
                       while (RunLength > 0) and not Text.Chars[LRun.StartIndex + RunLength - 1].IsLetterOrDigit do
-- 
2.14.1.windows.1

